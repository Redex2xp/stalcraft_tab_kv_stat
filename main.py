import os
import json
import re
import math
import sys
from pathlib import Path
from PIL import Image
import Levenshtein
import google.generativeai as genai
import discord
from discord.ext import commands
from dotenv import load_dotenv

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –í–ê–õ–ò–î–ê–¶–ò–Ø –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ---
load_dotenv()


def load_and_validate_env():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è. –ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É –ø—Ä–∏ –æ—à–∏–±–∫–µ."""
    config = {
        'API_KEY': os.getenv('GOOGLE_AI_API_KEY'),
        'BOT_TOKEN': os.getenv('DISCORD_BOT_TOKEN'),
        'ADMIN_USER_IDS_STR': os.getenv('ADMIN_USER_IDS'),
        'LOG_CHANNEL_ID_STR': os.getenv('LOG_CHANNEL_ID'),
        'TARGET_CHANNEL_IDS_STR': os.getenv('TARGET_CHANNEL_IDS'),
        'MIN_GAMES_FOR_STATS_STR': os.getenv('MIN_GAMES_FOR_STATS')
    }
    if not all(config.values()):
        print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–¥–∞–Ω—ã –≤ —Ñ–∞–π–ª–µ .env!")
        print(
            "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å—É—â–µ—Å—Ç–≤—É—é—Ç: GOOGLE_AI_API_KEY, DISCORD_BOT_TOKEN, ADMIN_USER_IDS, LOG_CHANNEL_ID, TARGET_CHANNEL_IDS, MIN_GAMES_FOR_STATS"
        )
        sys.exit(1)
    try:
        config['ADMIN_IDS'] = [
            int(aid.strip()) for aid in config['ADMIN_USER_IDS_STR'].split(',')
        ]
        config['LOG_CHANNEL_ID'] = int(config['LOG_CHANNEL_ID_STR'])
        config['TARGET_CHANNEL_IDS'] = [
            int(cid.strip()) for cid in config['TARGET_CHANNEL_IDS_STR'].split(',')
        ]
        config['MIN_GAMES'] = int(config['MIN_GAMES_FOR_STATS_STR'])
    except (ValueError, TypeError):
        print(
            "‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: ID –∏–ª–∏ —á–∏—Å–ª–æ –∏–≥—Ä –≤ —Ñ–∞–π–ª–µ .env –∏–º–µ—é—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç."
        )
        sys.exit(1)
    print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞.")
    return config


config = load_and_validate_env()

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
MAX_DISTANCE = 3
RAW_STATS_FILE = 'raw_stats.json'
PLAYER_AVERAGES_FILE = 'player_averages.json'
IMAGES_FOLDER = 'images'
API_KEY = config.get('API_KEY')
BOT_TOKEN = config['BOT_TOKEN']
TARGET_CHANNEL_IDS = config['TARGET_CHANNEL_IDS']
ADMIN_IDS = config['ADMIN_IDS']
TARGET_EMOJI = "‚úÖ"
LOG_CHANNEL_ID = config['LOG_CHANNEL_ID']
MIN_GAMES = config['MIN_GAMES']

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Discord –±–æ—Ç–∞ ---
intents = discord.Intents.default()
intents.message_content = True
intents.members = True
intents.reactions = True
bot = commands.Bot(command_prefix='>', intents=intents)


# --- –§—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö ---
def init_json_db(db_path: str, default_structure):
    if not os.path.exists(db_path):
        try:
            with open(db_path, 'w', encoding='utf-8') as f:
                json.dump(default_structure, f, ensure_ascii=False, indent=4)
        except IOError as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ '{db_path}': {e}")


def read_json_db(db_path: str):
    try:
        with open(db_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return {}
    except IOError as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ '{db_path}': {e}")
        return None


def write_json_db(db_path: str, data):
    try:
        with open(db_path, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=4)
    except IOError as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª '{db_path}': {e}")


def extract_data_with_gemini(image_path: str, prompt: str) -> str:
    try:
        img = Image.open(image_path)
        model = genai.GenerativeModel('gemini-2.5-flash')
        response = model.generate_content([prompt, img])
        return response.text.strip()
    except Exception as e:
        return f"–û—à–∏–±–∫–∞: {e}"


def parse_and_store_data(image_name: str, data: str, raw_data_dict: dict):
    lines = data.strip().split('\n')
    stats_for_this_image = []
    for line in lines:
        match = re.match(
            r'^\s*(\d+)\s+([\w\s.-]+?)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)',
            line.strip())
        if match:
            place, nickname, kills, deaths, assists, treasury, score = match.groups()
            stats_for_this_image.append({
                "place": int(place),
                "nickname": nickname.strip(),
                "kills": int(kills),
                "deaths": int(deaths),
                "assists": int(assists),
                "treasury": int(treasury),
                "score": int(score)
            })
    if stats_for_this_image: raw_data_dict[image_name] = stats_for_this_image
    return len(stats_for_this_image)


def update_player_averages():
    raw_data_dict = read_json_db(RAW_STATS_FILE)
    if not raw_data_dict: return "–°—ã—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ—Ç."

    # --- –ù–û–í–´–ô, –£–õ–£–ß–®–ï–ù–ù–´–ô –ë–õ–û–ö: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ "–∞–∫—Ç–∏–≤–Ω—ã—Ö" –∏–≥—Ä–æ–∫–æ–≤ –ø–æ ID —Å–æ–æ–±—â–µ–Ω–∏—è ---

    # 1. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤ –∏–∑ –Ω–∞—à–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö raw_stats.json.
    # –ò–º—è —Ñ–∞–π–ª–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç ID —Å–æ–æ–±—â–µ–Ω–∏—è: "1387832036580134933-image.png"
    all_known_files = list(raw_data_dict.keys())

    # 2. –°–æ—Ä—Ç–∏—Ä—É–µ–º —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ ID —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º –≤ –Ω–∞—á–∞–ª–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞.
    # –ü—Ä–µ–≤—Ä–∞—â–∞–µ–º ID –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ (int) –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —á–∏—Å–ª–æ–≤–æ–π, –∞ –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏.
    all_known_files.sort(key=lambda filename: int(filename.split('-')[0]), reverse=True)

    # 3. –ë–µ—Ä–µ–º –∏–º–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 10 —Ñ–∞–π–ª–æ–≤. –≠—Ç–æ –∏ –µ—Å—Ç—å –Ω–∞—à–∏ "–Ω–µ–¥–∞–≤–Ω–∏–µ –º–∞—Ç—á–∏".
    recent_files = set(all_known_files[:10])

    # 4. –°–æ–±–∏—Ä–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ (set) –Ω–∏–∫–Ω–µ–π–º–æ–≤ –≤—Å–µ—Ö, –∫—Ç–æ –∏–≥—Ä–∞–ª –≤ –Ω–µ–¥–∞–≤–Ω–∏—Ö –º–∞—Ç—á–∞—Ö.
    active_nicknames = set()
    for filename in recent_files:
        # –≠—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ —É–∂–µ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞, —Ç–∞–∫ –∫–∞–∫ –º—ã –±–µ—Ä–µ–º —Ñ–∞–π–ª—ã –∏–∑ —Å–∞–º–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è,
        # –Ω–æ –æ—Å—Ç–∞–≤–∏–º –µ–µ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏.
        if filename in raw_data_dict:
            for player_stat in raw_data_dict[filename]:
                active_nicknames.add(player_stat['nickname'])

    # --- –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –ë–õ–û–ö–ê ---

    all_stats = [stat for sublist in raw_data_dict.values() for stat in sublist]
    if not all_stats: return "–°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—É—Å—Ç—ã, –∞–Ω–∞–ª–∏–∑ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω."

    total_kills = sum(s.get('kills', 0) for s in all_stats)
    total_deaths = sum(s.get('deaths', 0) for s in all_stats)

    grouped_data = {}
    for player_stat in all_stats:
        nickname = player_stat['nickname']
        stats = (player_stat['place'], player_stat['kills'], player_stat['deaths'],
                 player_stat['assists'], player_stat['treasury'], player_stat['score'])
        found = False
        for name in grouped_data:
            if Levenshtein.distance(nickname, name) <= MAX_DISTANCE:
                grouped_data[name].append(stats)
                found = True
                break
        if not found: grouped_data[nickname] = [stats]

    new_averages = {}
    players_in_stats = 0
    for name, stats_list in grouped_data.items():
        is_active = False
        for active_nick in active_nicknames:
            if Levenshtein.distance(name, active_nick) <= MAX_DISTANCE:
                is_active = True
                break
        if not is_active:
            continue

        games = len(stats_list)
        if games < MIN_GAMES:
            continue

        cols = list(zip(*stats_list))
        avg_kills = sum(cols[1]) / games
        avg_deaths = sum(cols[2]) / games
        new_averages[name] = {
            "games_played": games,
            "avg_place": round(sum(cols[0]) / games),
            "kd": round(avg_kills / avg_deaths, 2) if avg_deaths > 0 else avg_kills,
            "avg_kills": round(avg_kills, 2),
            "avg_deaths": round(avg_deaths, 2),
            "avg_assists": round(sum(cols[3]) / games, 2),
            "avg_score": round(sum(cols[5]) / games, 2)
        }
        players_in_stats += 1

    write_json_db(PLAYER_AVERAGES_FILE, new_averages)

    summary_text = (
        f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è {players_in_stats} –∏–≥—Ä–æ–∫–æ–≤.\n"
        f"> (–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: –º–∏–Ω. **{MIN_GAMES}** –∏–≥—Ä –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ **10** –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –º–∞—Ç—á–∞—Ö)."
    )

    return {
        "summary_string": summary_text,
        "total_kills": total_kills,
        "total_deaths": total_deaths
    }


# --- –§—É–Ω–∫—Ü–∏–∏ –∏ –∫–ª–∞—Å—Å—ã Discord –±–æ—Ç–∞ ---


def create_stats_embed(player_list, page_num, total_pages, sort_mode):
    """–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–µ—Ç Embed, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑–±–∏–≤–∞—è –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª–µ–π, –µ—Å–ª–∏ –∏—Ö –º–Ω–æ–≥–æ, –∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –≤–∏–¥–∏–º—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –ø–æ–ª–µ–π."""
    start_index = page_num * 10
    end_index = start_index + 10

    sort_descriptions = {
        'kd': "–†–µ–π—Ç–∏–Ω–≥ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –ø–æ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—é **K/D**.",
        'place': "–†–µ–π—Ç–∏–Ω–≥ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –ø–æ **—Å—Ä–µ–¥–Ω–µ–º—É –º–µ—Å—Ç—É** (–æ—Ç –º–µ–Ω—å—à–µ–≥–æ –∫ –±–æ–ª—å—à–µ–º—É)."
    }

    embed = discord.Embed(title="üèÜ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–æ–≤",
                          description=sort_descriptions.get(sort_mode, "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
                          color=0x3498db)

    # –ù–µ–≤–∏–¥–∏–º—ã–π —Å–∏–º–≤–æ–ª (Zero-Width Space) –¥–ª—è –≤—Å–µ—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –ø–æ–ª–µ–π
    INVISIBLE_CHAR = "\u200b"

    players_on_this_page = player_list[start_index:end_index]

    if not players_on_this_page:
        embed.add_field(name=INVISIBLE_CHAR, value="–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.", inline=False)
    else:
        current_field_value = ""
        for i, stats in enumerate(players_on_this_page, start=start_index + 1):
            nickname = stats.get('nickname', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
            kd = stats.get('kd', 0.0)
            games = stats.get('games_played', 0)
            avg_place = stats.get('avg_place', 0)
            avg_kills = stats.get('avg_kills', 0.0)
            avg_deaths = stats.get('avg_deaths', 0.0)

            player_string = (
                f"**{i}. {nickname}**\n"
                f"> K/D: `{kd:.2f}` | –°—Ä. –º–µ—Å—Ç–æ: `{avg_place}` | –ò–≥—Ä: `{games}`\n"
                f"> –°—Ä. –£–±–∏–π—Å—Ç–≤–∞: `{round(avg_kills)}` | –°—Ä. –°–º–µ—Ä—Ç–∏: `{round(avg_deaths)}`\n")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç –ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –ª–∏–º–∏—Ç
            if len(current_field_value) + len(player_string) > 1024:
                # –ï—Å–ª–∏ –ø—Ä–µ–≤—ã—Å–∏—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–µ –ø–æ–ª–µ —Å –Ω–µ–≤–∏–¥–∏–º—ã–º –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
                embed.add_field(name=INVISIBLE_CHAR,
                                value=current_field_value,
                                inline=False)
                # –ò –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤–æ–µ
                current_field_value = player_string
            else:
                # –ò–Ω–∞—á–µ –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –∫ —Ç–µ–∫—É—â–µ–º—É
                current_field_value += player_string

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –ø–æ–ª–µ —Å –Ω–µ–≤–∏–¥–∏–º—ã–º –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
        if current_field_value:
            embed.add_field(name=INVISIBLE_CHAR,
                            value=current_field_value,
                            inline=False)

    embed.set_footer(
        text=f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num + 1} / {total_pages} (–º–∏–Ω. –∏–≥—Ä: {MIN_GAMES})")
    return embed


class StatsPaginationView(discord.ui.View):
    """–≠—Ç–æ—Ç –∫–ª–∞—Å—Å —É–ø—Ä–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫–∞–º–∏ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""

    def __init__(self, player_stats):
        super().__init__(timeout=180)
        self.all_player_stats = player_stats
        self.current_page = 0
        self.sort_by = 'kd'

        self._sort_stats()
        self.total_pages = math.ceil(len(self.all_player_stats) / 10)
        self.update_buttons_state()

    def _sort_stats(self):
        if self.sort_by == 'place':
            self.all_player_stats.sort(key=lambda p: p.get('avg_place', 999))
        else:
            self.all_player_stats.sort(key=lambda p: p.get('kd', 0), reverse=True)

    def update_buttons_state(self):
        self.sort_kd_button.disabled = self.sort_by == 'kd'
        self.sort_place_button.disabled = self.sort_by == 'place'
        self.previous_button.disabled = self.current_page == 0
        self.next_button.disabled = self.current_page >= self.total_pages - 1

    async def _update_view(self, interaction: discord.Interaction):
        self.update_buttons_state()
        embed = create_stats_embed(self.all_player_stats, self.current_page,
                                   self.total_pages, self.sort_by)
        await interaction.response.edit_message(embed=embed, view=self)

    @discord.ui.button(label="–°–æ—Ä—Ç. –ø–æ K/D", style=discord.ButtonStyle.success, row=0)
    async def sort_kd_button(self, interaction: discord.Interaction,
                             button: discord.ui.Button):
        if self.sort_by == 'kd':
            await interaction.response.defer()
            return
        self.sort_by = 'kd'
        self._sort_stats()
        self.current_page = 0
        await self._update_view(interaction)

    @discord.ui.button(label="–°–æ—Ä—Ç. –ø–æ –ú–µ—Å—Ç—É", style=discord.ButtonStyle.success, row=0)
    async def sort_place_button(self, interaction: discord.Interaction,
                                button: discord.ui.Button):
        if self.sort_by == 'place':
            await interaction.response.defer()
            return
        self.sort_by = 'place'
        self._sort_stats()
        self.current_page = 0
        await self._update_view(interaction)

    @discord.ui.button(label="‚óÄ –ù–∞–∑–∞–¥", style=discord.ButtonStyle.secondary, row=1)
    async def previous_button(self, interaction: discord.Interaction,
                              button: discord.ui.Button):
        if self.current_page > 0:
            self.current_page -= 1
            await self._update_view(interaction)
        else:
            await interaction.response.defer()

    @discord.ui.button(label="–í–ø–µ—Ä—ë–¥ ‚ñ∂", style=discord.ButtonStyle.primary, row=1)
    async def next_button(self, interaction: discord.Interaction,
                          button: discord.ui.Button):
        if self.current_page < self.total_pages - 1:
            self.current_page += 1
            await self._update_view(interaction)
        else:
            await interaction.response.defer()


# --- –°–æ–±—ã—Ç–∏—è –∏ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ ---
@bot.event
async def on_ready():
    os.makedirs(IMAGES_FOLDER, exist_ok=True)
    init_json_db(RAW_STATS_FILE, {})
    init_json_db(PLAYER_AVERAGES_FILE, {})
    if API_KEY:
        try:
            genai.configure(api_key=API_KEY)
            print("‚úÖ Gemini API —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω.")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Gemini API: {e}")
    else:
        print("‚ö†Ô∏è Gemini API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω, –∫–æ–º–∞–Ω–¥–∞ >update –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.")
    print(f'–ë–æ—Ç {bot.user} –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!')
    print(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –±–æ—Ç–∞: {ADMIN_IDS}")


@bot.event
async def on_raw_reaction_add(payload: discord.RawReactionActionEvent):
    if not (payload.channel_id in TARGET_CHANNEL_IDS and payload.user_id in ADMIN_IDS
            and str(payload.emoji) == TARGET_EMOJI):
        return
    channel = bot.get_channel(payload.channel_id)
    if not channel: return
    try:
        message = await channel.fetch_message(payload.message_id)
        if not message.attachments: return
        for attachment in message.attachments:
            if "image" in attachment.content_type:
                file_path = os.path.join(IMAGES_FOLDER,
                                         f"{message.id}-{attachment.filename}")
                if not os.path.exists(file_path):
                    await attachment.save(file_path)
                    print(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ '{file_path}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –ø–æ —Ä–µ–∞–∫—Ü–∏–∏: {e}")


@bot.event
async def on_raw_reaction_remove(payload: discord.RawReactionActionEvent):
    if not (payload.channel_id in TARGET_CHANNEL_IDS and payload.user_id in ADMIN_IDS
            and str(payload.emoji) == TARGET_EMOJI):
        return
    channel = bot.get_channel(payload.channel_id)
    if not channel: return
    try:
        message = await channel.fetch_message(payload.message_id)
        if not message.attachments: return
        for attachment in message.attachments:
            file_path = os.path.join(IMAGES_FOLDER,
                                     f"{message.id}-{attachment.filename}")
            if os.path.exists(file_path):
                os.remove(file_path)
                print(f"üóëÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ '{file_path}' —É–¥–∞–ª–µ–Ω–æ.")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –ø–æ —Å–Ω—è—Ç–æ–π —Ä–µ–∞–∫—Ü–∏–∏: {e}")


@bot.command()
@commands.check(lambda ctx: ctx.author.id in ADMIN_IDS)
async def update(ctx):
    """(–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞) –ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –ü–ï–†–ï–°–ß–ò–¢–´–í–ê–ï–¢ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É."""
    log_channel = bot.get_channel(LOG_CHANNEL_ID)
    if not log_channel:
        await ctx.send("‚ùå **–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:** –ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –∫–∞–Ω–∞–ª –¥–ª—è –ª–æ–≥–æ–≤.")
        return
    await ctx.send(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–∏–Ω—è—Ç–∞. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç –≤ {log_channel.mention}.")
    await log_channel.send(
        f"‚è≥ –ù–∞—á–∏–Ω–∞—é –ø–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–æ–º–∞–Ω–¥–µ –æ—Ç {ctx.author.mention}...")

    image_dir = Path(IMAGES_FOLDER)
    image_files = list(image_dir.glob('*.png')) + list(image_dir.glob('*.jpg')) + list(
        image_dir.glob('*.jpeg'))
    raw_data = read_json_db(RAW_STATS_FILE)
    new_images = [f for f in image_files if f.name not in raw_data]

    processed_count = 0
    if new_images:
        await log_channel.send(
            f"üîç –ù–∞–π–¥–µ–Ω–æ **{len(new_images)}** –Ω–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
        prompt = "–ò–∑–≤–ª–µ–∫–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏. –ö–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å: –ú–µ—Å—Ç–æ, –ò–º—è –∏–≥—Ä–æ–∫–∞, –£–±–∏–π—Å—Ç–≤–∞, –°–º–µ—Ä—Ç–∏, –ü–æ–º–æ—â—å, –ö–∞–∑–Ω–∞, –°—á–µ—Ç. –ù–µ –≤–∫–ª—é—á–∞–π –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã –≤ –æ—Ç–≤–µ—Ç. –†–∞–∑–¥–µ–ª—è–π –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–æ–±–µ–ª–∞–º–∏."
        for image_path in new_images:
            print(f"--- –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é: {image_path.name} ---")
            extracted_data = await bot.loop.run_in_executor(None,
                                                            extract_data_with_gemini,
                                                            str(image_path), prompt)
            if not extracted_data.startswith("–û—à–∏–±–∫–∞"):
                parsed_count = parse_and_store_data(image_name=image_path.name,
                                                    data=extracted_data,
                                                    raw_data_dict=raw_data)
                print(f"–£—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ {parsed_count} —Å—Ç—Ä–æ–∫.")
                processed_count += 1
            else:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç Gemini: {extracted_data}")
        if processed_count > 0:
            write_json_db(RAW_STATS_FILE, raw_data)
            await log_channel.send(
                f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ: **{processed_count}** –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π."
            )
    else:
        await log_channel.send("‚ÑπÔ∏è –ù–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

    print("–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–µ—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–∏—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π...")
    await log_channel.send("üîÑ –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞—é –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–æ–≤...")
    update_results = update_player_averages()

    final_message = []
    if isinstance(update_results, dict):
        final_message.append(f"üéâ **–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!**")
        final_message.append(f"> {update_results['summary_string']}")
        final_message.append(
            f"‚öîÔ∏è **–í—Å–µ–≥–æ —É–±–∏–π—Å—Ç–≤ –ø–æ —Å–µ—Ä–≤–µ—Ä—É:** `{update_results['total_kills']}`")
        final_message.append(
            f"üíÄ **–í—Å–µ–≥–æ —Å–º–µ—Ä—Ç–µ–π –ø–æ —Å–µ—Ä–≤–µ—Ä—É:** `{update_results['total_deaths']}`")
    else:
        final_message.append(f"‚ö†Ô∏è **–ó–∞–≤–µ—Ä—à–µ–Ω–æ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º:**\n> {update_results}")
    await log_channel.send("\n".join(final_message))


@update.error
async def update_error(ctx, error):
    if isinstance(error, commands.CheckFailure):
        await ctx.send("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")


@bot.command()
async def tab(ctx):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–æ–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏."""
    player_averages = read_json_db(PLAYER_AVERAGES_FILE)
    if not player_averages:
        await ctx.send(
            f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –ø—É—Å—Ç–∞. –î–ª—è –ø–æ–ø–∞–¥–∞–Ω–∏—è –≤ —Ä–µ–π—Ç–∏–Ω–≥ –Ω—É–∂–Ω–æ —Å—ã–≥—Ä–∞—Ç—å –º–∏–Ω–∏–º—É–º **{MIN_GAMES}** –∏–≥—Ä."
        )
        return
    player_list = [{'nickname': nk, **st} for nk, st in player_averages.items()]
    view = StatsPaginationView(player_list)
    initial_embed = create_stats_embed(view.all_player_stats, view.current_page,
                                       view.total_pages, view.sort_by)
    await ctx.send(embed=initial_embed, view=view)


# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
if __name__ == "__main__":
    if not BOT_TOKEN:
        print("‚ùå –û—à–∏–±–∫–∞: –¢–æ–∫–µ–Ω –±–æ—Ç–∞ DISCORD_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ñ–∞–π–ª–µ .env")
    else:
        bot.run(BOT_TOKEN)
